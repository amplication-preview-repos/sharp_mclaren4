/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dashboard as PrismaDashboard,
  User as PrismaUser,
} from "@prisma/client";
import { Dashboard } from "./Dashboard";

export class DashboardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DashboardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dashboard.count(args);
  }

  async dashboards(
    args: Prisma.DashboardFindManyArgs
  ): Promise<PrismaDashboard[]> {
    return this.prisma.dashboard.findMany(args);
  }
  async dashboard(
    args: Prisma.DashboardFindUniqueArgs
  ): Promise<PrismaDashboard | null> {
    return this.prisma.dashboard.findUnique(args);
  }
  async createDashboard(
    args: Prisma.DashboardCreateArgs
  ): Promise<PrismaDashboard> {
    return this.prisma.dashboard.create(args);
  }
  async updateDashboard(
    args: Prisma.DashboardUpdateArgs
  ): Promise<PrismaDashboard> {
    return this.prisma.dashboard.update(args);
  }
  async deleteDashboard(
    args: Prisma.DashboardDeleteArgs
  ): Promise<PrismaDashboard> {
    return this.prisma.dashboard.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.dashboard
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async GetAnalyticsDataForDashboard(args: string): Promise<Dashboard> {
    throw new Error("Not implemented");
  }
  async GetDashboardForUser(args: string): Promise<Dashboard> {
    throw new Error("Not implemented");
  }
}
